import {IFunctionReplacement} from "./IFunctionReplacement";
import {makeRandomValue} from "@src/symbolic_expression/helper";
import * as GTS from "../../tester/global_tester_state";
import tainter from "../tainter";
import SharedOutput from "@src/util/output";
import Process from "@src/process/processes/Process";

export default class RandomInterceptor {
    static generate(process: Process): IFunctionReplacement {
        return {
            function: process.global.Math.random,
            replacement: ($$function, $$value2, $$values, serial) => {
                const {concrete, symbolic} = makeRandomValue(process, 500);
                if (process.isANodeProcess()) {
                    GTS.globalTesterState!.addRegularInput(symbolic.executionState);
                }
                const $$random = tainter.taintAndCapture(concrete, symbolic);
                GTS.globalTesterState!.addSymbolicInput($$random, "Value generated by random number");
                SharedOutput.getOutput().writeInputValue(process.processId, $$random);
                return $$random;
            }
        }
    }
}